#!/bin/bash
#!/bin/bash

function test_config::get() {
  local tmp_file=/tmp/zmicro_core_utils_test_config_get
  echo "" >$tmp_file

  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "" \
    "$(config::get CUSTOM_KEY $tmp_file)"

  echo "CUSTOM_KEY=zero" >>$tmp_file

  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "zero" \
    "$(config::get CUSTOM_KEY $tmp_file)"

  echo "#CUSTOM_KEY=zero" >$tmp_file

  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "" \
    "$(config::get CUSTOM_KEY $tmp_file)"

  echo "CUSTOM_KEY=zero#xxx" >$tmp_file
  echo "CUSTOM_KEY=zero2 # xxx" >>$tmp_file
  echo "# CUSTOM_KEY=zero3" >>$tmp_file
  echo " # CUSTOM_KEY=zero4" >>$tmp_file
  echo "CUSTOM_KEY=zero5 " >>$tmp_file

  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "zero5" \
    "$(config::get CUSTOM_KEY $tmp_file)"

  echo "ENABLE=true" >$tmp_file

  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "true" \
    "$(config::get ENABLE $tmp_file)"

  echo "BOOTSTRAP_COMMAND=\"yarn install --frozen-lockfile\"" >$tmp_file
  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "yarn_install_--frozen-lockfile" \
    "$(config::get BOOTSTRAP_COMMAND $tmp_file | sed 's/ /_/g')"

  rm $tmp_file
}

function test_config::set() {
  local tmp_file=/tmp/zmicro_core_utils_test_config_get
  echo "" >$tmp_file

  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "" \
    "$(config::get CUSTOM_KEY $tmp_file)"

  config::set CUSTOM_KEY zero $tmp_file

  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "zero" \
    "$(config::get CUSTOM_KEY $tmp_file)"

  rm $tmp_file
}

function test_config::remove() {
  config::remove CUSTOM_KEY_FOR_REMOVE

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "" \
    "$(config::get CUSTOM_KEY_FOR_REMOVE)"

  config::set CUSTOM_KEY_FOR_REMOVE zero

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "zero" \
    "$(config::get CUSTOM_KEY_FOR_REMOVE)"

  config::remove CUSTOM_KEY_FOR_REMOVE

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "" \
    "$(config::get CUSTOM_KEY_FOR_REMOVE)"
}

function test_config::profile() {
  local flag="ZMICRO_TEST_PROFILE"
  local text=$(
    cat <<-END
# ZMICRO_TEST_PROFILE
export ZMICRO_HOME=${ZMICRO_HOME}
export PATH=\$ZMICRO_HOME/bin:\$PATH 
END
  )
  local base_path=/tmp/test_config_profile
  rm -rf $base_path
  mkdir -p $base_path

  config::profile "$flag" "$text" "$base_path"

  testing::expect \
    "${FUNCNAME[0]} found .zshrc" \
    "to_equal" \
    "true" \
    "$(path::exist $base_path/.zshrc)"

  testing::expect \
    "${FUNCNAME[0]} found .bashrc" \
    "to_equal" \
    "true" \
    "$(path::exist $base_path/.bashrc)"

  testing::expect \
    "${FUNCNAME[0]} found .bash_profile" \
    "to_equal" \
    "true" \
    "$(path::exist $base_path/.bash_profile)"

  testing::expect \
    "${FUNCNAME[0]} found .profile" \
    "to_equal" \
    "true" \
    "$(path::exist $base_path/.profile)"

  local lines=$(cat $base_path/.zshrc | grep $flag | wc -l)
  testing::expect \
    "${FUNCNAME[0]} count .zshrc exist flag 1" \
    "to_equal" \
    "1" \
    "$lines"

  lines=$(cat $base_path/.bashrc | grep $flag | wc -l)
  testing::expect \
    "${FUNCNAME[0]} count .bashrc exist flag 1" \
    "to_equal" \
    "1" \
    "$lines"

  config::profile "$flag" "$text" "$base_path"
  config::profile "$flag" "$text" "$base_path"
  config::profile "$flag" "$text" "$base_path"

  lines=$(cat $base_path/.zshrc | grep $flag | wc -l)
  testing::expect \
    "${FUNCNAME[0]} count .zshrc exist flag 1" \
    "to_equal" \
    "1" \
    "$lines"

  lines=$(cat $base_path/.bashrc | grep $flag | wc -l)
  testing::expect \
    "${FUNCNAME[0]} count .bashrc exist flag 1" \
    "to_equal" \
    "1" \
    "$lines"

  rm -rf $base_path
}
