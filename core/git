#!/bin/bash

git::commit_message() {
  git log -1 --pretty=%B -n 1
}

git::commit_message_full() {
  git log -1 --pretty=%B
}

git::commit_hash() {
  git rev-parse --short=9 HEAD
}

git::commit_hash_full() {
  git rev-parse HEAD
}

git::commit_author() {
  git show -s --format='%ae'
}

git::commit_timestamp() {
  git::commit_timestamp_date
}

git::commit_timestamp_date() {
  local gitMainVersion=$(git --version | awk '{print $3}' | awk -F '.' '{print $1}')
  local gitSubVersion=$(git --version | awk '{print $3}' | awk -F '.' '{print $2}')

  if [ "$gitMainVersion" -ge "2" ] && [ "$gitSubVersion" -ge "7" ]; then
    git show -s --format=%cd --date="format:%Y-%m-%d"
  else
    local datetime_str=$(git show -s --format=%cd --date=local)
    timestamp::to_date "$datetime_str"
  fi
}

git::commit_timestamp_ms() {
  git show -s --format=%cd --date="format:%s"
}

git::commit_timestamp_human() {
  git show -s --format=%cd
}

git::fix_permissions() {
  # fix unsafe repository
  git config --global -l | grep "safe.directory=\*" >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    git config --global --add safe.directory "*"
  fi
}

git::origin_url() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git config --get remote.origin.url
}

git::namespace() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git::origin_url | awk -F '/' '{print $4}'
}

git::basename() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git::origin_url | awk -F '/' '{print $5}' | awk -F '.git' '{print $1}'
}

git::repo_name() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  echo "$(git::namespace)/$(git::basename)"
}

git::branch() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git rev-parse --abbrev-ref HEAD
}

git::tag() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git describe --tags --abbrev=0
}

git::commit() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git::commit_hash_full
}

git::is_changed() {
  if [ "$(git status --porcelain)" != "" ]; then
    echo "true"
  else
    echo "false"
  fi
}

# stackoverflow: https://stackoverflow.com/questions/5139290/how-to-check-if-theres-nothing-to-be-committed-in-the-current-branch
git::is_added_before_commit() {
  git diff --cached --exit-code >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

git::is_ready_to_commit() {
  git::is_added_before_commit
}

git::repo_url() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  local url=$(git::origin_url)
  echo "${url%.git}"
}

git::issue_url() {
  local url=$(git::repo_url)
  echo "${url}/issues"
}

git::pull_request_url() {
  local url=$(git::repo_url)
  echo "${url}/pulls"
}

git::merge_request_url() {
  local url=$(git::repo_url)
  echo "${url}/merge_requests"
}

git::url_ssh_to_http() {
  local ssh_url=$1
  local base_url=$2

  if [ -z "$ssh_url" ]; then
    log::error "[git::url_ssh_to_http] ssh_url is required"
    return 1
  fi

  if [ -z "$base_url" ]; then
    log::error "[git::url_ssh_to_http] base_url is required"
    return 1
  fi

  #  ssh://git@example.com:666/zero/example.git => zero/example
  #  ssh://git@example.com:666/zero/example => zero/example
  #  ssh://git@example.com/zero/example => zero/example
  # start with ssh://
  if [[ $ssh_url =~ ^ssh:// ]]; then
    local repo_namespace=$(echo "$ssh_url" | awk -F '/' '{print $4}')
    local repo_name=$(echo "$ssh_url" | awk -F '/' '{print $5}' | awk -F '.git' '{print $1}')
    echo "$base_url/$repo_namespace/$repo_name"
    return
  fi

  # git@github.com:zero/example.git => zero/example
  if [[ $ssh_url =~ ^git@ ]]; then
    local repo_namespace=$(echo "$ssh_url" | awk -F ':' '{print $2}' | awk -F '/' '{print $1}')
    local repo_name=$(echo "$ssh_url" | awk -F ':' '{print $2}' | awk -F '/' '{print $2}' | awk -F '.git' '{print $1}')
    echo "$base_url/$repo_namespace/$repo_name"
    return
  fi

  # http://github.com/zero/example.git => zero/example
  if [[ $ssh_url =~ ^http ]]; then
    local repo_namespace=$(echo "$ssh_url" | awk -F '/' '{print $4}')
    local repo_name=$(echo "$ssh_url" | awk -F '/' '{print $5}' | awk -F '.git' '{print $1}')
    echo "$base_url/$repo_namespace/$repo_name"
    return
  fi

  # http://github.com/zero/example.git => zero/example
  if [[ $ssh_url =~ ^git ]]; then
    local repo_namespace=$(echo "$ssh_url" | awk -F '/' '{print $4}')
    local repo_name=$(echo "$ssh_url" | awk -F '/' '{print $5}' | awk -F '.git' '{print $1}')
    echo "$base_url/$repo_namespace/$repo_name"
    return
  fi

  echo "[git::url_ssh_to_http] unsupported ssh_url: $ssh_url"
  return 1
}

git::has_tag() {
  local tag=$1
  if [ -z "$tag" ]; then
    log::error "[git::has_tag] tag is required"
    return 1
  fi

  git ls-remote --exit-code origin refs/tags/$tag >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
  else
    echo "true"
  fi
}

git::switch_tag() {
  local tag=$1
  if [ -z "$tag" ]; then
    log::error "[git::switch_tag] tag is required"
    return 1
  fi

  # apply proxy
  net::using_smart_proxy

  git fetch origin tag $tag >>/dev/null
  if [ "$?" != "0" ]; then
    log::error "[git::switch_tag] failed to fetch tag: $tag"
    return 1
  fi

  git checkout $tag >>/dev/null
}

git::use_version() {
  local version=$1
  if [ -z "$version" ]; then
    log::error "[git::use_version] version is required"
    return 1
  fi

  # if [ "$(git::has_tag $version)" != "true" ]; then
  #   log::error "[git::use_version] version($version) not found"
  #   return 1
  # fi

  git::switch_tag $version
}

# git::checkout checkouts git repository to context dir with specified branch
# git::checkout@usage <typ> <name> <url> <context>
git::checkout() {
  # branch
  # tag
  # commit
  local typ=$1
  local name=$2
  local url=$3
  local context=$4

  if [ -z "$typ" ]; then
    log::error "[git::checkout] typ is required"
    return 1
  fi

  if [ -z "$name" ]; then
    log::error "[git::checkout] name is required"
    return 1
  fi

  if [ -z "$url" ]; then
    log::error "[git::checkout] url is required"
    return 1
  fi

  if [ -z "$typ" ]; then
    log::error "[git::checkout] typ is required"
    return 1
  fi

  if [ -z "$name" ]; then
    log::error "[git::checkout] name is required"
    return 1
  fi

  if [ -z "$context" ]; then
    log::error "[git::checkout] context is required"
    return 1
  fi

  if [ "$typ" != "branch" ] && [ "$typ" != "tag" ] && [ "$typ" != "commit" ]; then
    log::error "[git::checkout] type($typ) is not allowed, only allow branch,tag,commit"
    return 1
  fi

  if [ -d "$context" ]; then
    log::error "[git::checkout] context($context) is already exists, please remove it first."
    return 1
  fi

  # apply proxy
  net::using_smart_proxy

  log::debug "HTTPS_PROXY: $HTTP_PROXY"
  local tmp_error_log=$(os::tmp_file)

  if [ "$typ" = "branch" ] || [ "$typ" = "tag" ]; then
    log::info "[git::checkout] clone new repository with $typ($name) to $context ..."
    git clone --depth=1 -b $name $url $context >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[git::checkout] failed to checkout repo with $typ($name) ..."
      cat $tmp_error_log
      return 1
    fi
    return
  fi

  local origin_context=$(pwd)

  # # type: commit
  # log::info "[git::checkout] check out new repository with $typ($name) to $context ..."
  # git clone --depth=1 $url $context >>/dev/null 2>$tmp_error_log
  # if [ "$?" != "0" ]; then
  #   log::error "[git::checkout] failed to checkout repo with $typ($name) ..."
  #   cat $tmp_error_log
  #   return 1
  # fi

  # cd $context

  # log::info "[git::checkout] updating remote name at context($context)..."
  # git fetch --depth=1 origin $name >>/dev/null 2>$tmp_error_log
  # if [ "$?" != "0" ]; then
  #   log::error "[git::checkout] failed to fetch origin with $typ($name) ..."
  #   cat $tmp_error_log
  #   return 1
  # fi

  # log::info "[git::checkout] switch to $typ($name) ..."
  # git checkout $name >>/dev/null 2>$tmp_error_log
  # if [ "$?" != "0" ]; then
  #   log::error "[git::checkout] failed to checkout $typ($name) ..."
  #   cat $tmp_error_log
  #   return 1
  # fi

  # type: commit
  # fix Server does not allow request for unadvertised object

  log::info "[git::checkout] clone new repository with $typ($name) to $context ..."
  git clone $url $context >>/dev/null 2>$tmp_error_log
  if [ "$?" != "0" ]; then
    log::error "[git::checkout] failed to checkout repo with $typ($name) ..."
    cat $tmp_error_log
    return 1
  fi

  cd $context

  log::info "[git::checkout] switch to $typ($name) ..."
  git reset --hard $name >>/dev/null 2>$tmp_error_log
  if [ "$?" != "0" ]; then
    log::error "[git::checkout] failed to checkout $typ($name) ..."
    cat $tmp_error_log
    return 1
  fi

  cd $origin_context
}

git::global_user() {
  git config --global user.name
}

git::global_email() {
  git config --global user.email
}

git::global_setup() {
  local git_user=$1
  local git_email=$2

  if [ -z "$git_user" ]; then
    git_user=$(git::global_user)
  fi

  if [ -z "$git_email" ]; then
    git_email=$(git::global_email)
  fi

  # credential
  git config --global credential.helper store
  # git config --global credential.helper 'cache --timeout=604800'
  # editor
  git config --global core.editor "vim"
  # default branch
  git config --global init.defaultbranch master
  # pull reabse
  git config --global pull.rebase false

  # if [ "$git_user" = "" ] || [ "$git_email" = "" ]; then
  #   log::warn "Config Git: git_user and git_email is required"
  #   exit 0
  # fi

  # local origin_name=$(git config --get user.name)
  if [ "$git_user" != "" ]; then
    git config --global user.name "${git_user}"
  else
    local origin=$(git::global_user)
    if [ -z "$origin" ]; then
      # Default
      git config --global user.name "${DEFAULT_GIT_USERNAME}"
    fi
  fi

  if [ "$git_email" != "" ]; then
    git config --global user.email "${git_email}"
  else
    local origin=$(git::global_email)
    if [ -z "$origin" ]; then
      git config --global user.email "${DEFAULT_GIT_EMAIL}"
    fi
  fi

  # pull strategies
  #   hint: Pulling without specifying how to reconcile divergent branches is
  #   hint: discouraged. You can squelch this message by running one of the following
  #   hint: commands sometime before your next pull:
  #   hint:
  #   hint:   git config pull.rebase false  # merge (the default strategy)
  #   hint:   git config pull.rebase true   # rebase
  #   hint:   git config pull.ff only       # fast-forward only
  #   hint:
  #   hint: You can replace "git config" with "git config --global" to set a default
  #   hint: preference for all repositories. You can also pass --rebase, --no-rebase,
  #   hint: or --ff-only on the command line to override the configured default per
  #   hint: invocation.
  git config --global pull.rebase false

  # fix git permissions
  git::fix_permissions
}

git::clone() {
  local path=$1
  local repository_url=$2
  local branch=$3

  if [ -z "$branch" ]; then
    branch="master"
  fi

  if [ -z "$path" ]; then
    log::error "[git::clone] path is required"
    return 1
  fi

  if [ -z "$repository_url" ]; then
    log::error "[git::clone] repository_url is required"
    return 1
  fi

  local tmp_error_log=$(os::tmp_file)
  log::debug "[git::clone] clone repo($repository_url) to $path ..."
  os::git clone --depth=1 -b $branch $repository_url $path >>/dev/null 2>$tmp_error_log
  if [ "$?" != "0" ]; then
    log::error "[git::clone] failed to clone repo($repository_url) to $path ..."
    cat $tmp_error_log
    return 1
  fi
}

git::has_branch() {
  local name=$1
  local repo=$2
  if [ -z "$name" ]; then
    log::error "[git::has_branch] name is required"
    return 1
  fi

  if [ -z "$repo" ]; then
    repo=$(git::origin_url)
  fi

  local branch=$(git ls-remote --heads $repo $name)
  if [ -z "$branch" ]; then
    echo "false"
  else
    echo "true"
  fi
}

export -f git::commit_message
export -f git::commit_message_full
export -f git::commit_hash
export -f git::commit_hash_full
export -f git::commit_author
export -f git::commit_timestamp
export -f git::commit_timestamp_date
export -f git::commit_timestamp_ms
export -f git::commit_timestamp_human

export -f git::fix_permissions

export -f git::origin_url
export -f git::namespace
export -f git::basename
export -f git::repo_name

export -f git::branch
export -f git::tag
export -f git::commit

export -f git::is_changed
export -f git::is_added_before_commit
export -f git::is_ready_to_commit

export -f git::repo_url
export -f git::issue_url
export -f git::pull_request_url
export -f git::merge_request_url

export -f git::url_ssh_to_http

export -f git::has_tag
export -f git::switch_tag
export -f git::use_version

export -f git::checkout

export -f git::global_user
export -f git::global_email

export -f git::global_setup

export -f git::clone

export -f git::has_branch


