#!/bin/bash

git::commit_message() {
  git log -1 --pretty=%B -n 1
}

git::commit_message_full() {
  git log -1 --pretty=%B
}

git::commit_hash() {
  git rev-parse --short=9 HEAD
}

git::commit_hash_full() {
  git rev-parse HEAD
}

git::commit_author() {
  git::commit_author_name
}

git::commit_author_name() {
  # git log -1 --pretty=format:'%an'
  git show -s --format='%an'
}

git::commit_author_email() {
  git show -s --format='%ae'
}

git::commit_timestamp() {
  local gitMainVersion=$(git --version | awk '{print $3}' | awk -F '.' '{print $1}')
  local gitSubVersion=$(git --version | awk '{print $3}' | awk -F '.' '{print $2}')

  if [ "$gitMainVersion" -ge "2" ] && [ "$gitSubVersion" -ge "7" ]; then
    git show -s --format=%cd --date="format:%Y-%m-%d_%H:%M:%S"
  else
    local datetime_str=$(git show -s --format=%cd --date=local)
    timestamp::to_date "$datetime_str"
  fi
}

git::commit_timestamp_date() {
  local gitMainVersion=$(git --version | awk '{print $3}' | awk -F '.' '{print $1}')
  local gitSubVersion=$(git --version | awk '{print $3}' | awk -F '.' '{print $2}')

  if [ "$gitMainVersion" -ge "2" ] && [ "$gitSubVersion" -ge "7" ]; then
    git show -s --format=%cd --date="format:%Y-%m-%d"
  else
    local datetime_str=$(git show -s --format=%cd --date=local)
    timestamp::to_date "$datetime_str"
  fi
}

git::commit_timestamp_ms() {
  git show -s --format=%cd --date="format:%s"
}

git::commit_timestamp_human() {
  git show -s --format=%cd
}

git::fix_permissions() {
  # fix unsafe repository
  git config --global -l | grep "safe.directory=\*" >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    git config --global --add safe.directory "*"
  fi
}

git::origin_url() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git config --get remote.origin.url
}

git::namespace() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git::origin_url | awk -F '/' '{print $4}'
}

git::basename() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git::origin_url | awk -F '/' '{print $5}' | awk -F '.git' '{print $1}'
}

git::repo_name() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  echo "$(git::namespace)/$(git::basename)"
}

git::branch() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git show-ref -q
  if [ "$?" != "0" ]; then
    # new git repository, not pushed to remote
    local current_branch="master"
    if [ "$?" != "0" ]; then
      local default_branch=$(git config --get init.defaultbranch)
      if [ -n "$default_branch" ]; then
        current_branch=$default_branch
      fi
    fi

    echo "$current_branch"
    return
  fi

  git rev-parse --abbrev-ref HEAD
}

git::tag() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git describe --tags --abbrev=0
}

git::commit() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  git::commit_hash_full
}

git::is_changed() {
  if [ "$(git status --porcelain)" != "" ]; then
    echo "true"
  else
    echo "false"
  fi
}

# stackoverflow: https://stackoverflow.com/questions/5139290/how-to-check-if-theres-nothing-to-be-committed-in-the-current-branch
git::is_added_before_commit() {
  git diff --cached --exit-code >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

git::is_ready_to_commit() {
  git::is_added_before_commit
}

git::repo_url() {
  local context=$1
  if [ -n "$context" ]; then
    cd $context
  fi

  local url=$(git::origin_url)
  echo "${url%.git}"
}

git::issue_url() {
  local url=$(git::repo_url)
  echo "${url}/issues"
}

git::pull_request_url() {
  local url=$(git::repo_url)
  echo "${url}/pulls"
}

git::merge_request_url() {
  local url=$(git::repo_url)
  echo "${url}/merge_requests"
}

git::url_ssh_to_http() {
  local ssh_url=$1
  local base_url=$2

  if [ -z "$ssh_url" ]; then
    log::error "[git::url_ssh_to_http] ssh_url is required"
    return 1
  fi

  if [ -z "$base_url" ]; then
    log::error "[git::url_ssh_to_http] base_url is required"
    return 1
  fi

  #  ssh://git@example.com:666/zero/example.git => zero/example
  #  ssh://git@example.com:666/zero/example => zero/example
  #  ssh://git@example.com/zero/example => zero/example
  # start with ssh://
  if [[ $ssh_url =~ ^ssh:// ]]; then
    local repo_namespace=$(echo "$ssh_url" | awk -F '/' '{print $4}')
    local repo_name=$(echo "$ssh_url" | awk -F '/' '{print $5}' | awk -F '.git' '{print $1}')
    echo "$base_url/$repo_namespace/$repo_name"
    return
  fi

  # git@github.com:zero/example.git => zero/example
  if [[ $ssh_url =~ ^git@ ]]; then
    local repo_namespace=$(echo "$ssh_url" | awk -F ':' '{print $2}' | awk -F '/' '{print $1}')
    local repo_name=$(echo "$ssh_url" | awk -F ':' '{print $2}' | awk -F '/' '{print $2}' | awk -F '.git' '{print $1}')
    echo "$base_url/$repo_namespace/$repo_name"
    return
  fi

  # http://github.com/zero/example.git => zero/example
  if [[ $ssh_url =~ ^http ]]; then
    local repo_namespace=$(echo "$ssh_url" | awk -F '/' '{print $4}')
    local repo_name=$(echo "$ssh_url" | awk -F '/' '{print $5}' | awk -F '.git' '{print $1}')
    echo "$base_url/$repo_namespace/$repo_name"
    return
  fi

  # http://github.com/zero/example.git => zero/example
  if [[ $ssh_url =~ ^git ]]; then
    local repo_namespace=$(echo "$ssh_url" | awk -F '/' '{print $4}')
    local repo_name=$(echo "$ssh_url" | awk -F '/' '{print $5}' | awk -F '.git' '{print $1}')
    echo "$base_url/$repo_namespace/$repo_name"
    return
  fi

  echo "[git::url_ssh_to_http] unsupported ssh_url: $ssh_url"
  return 1
}

git::has_tag() {
  local tag=$1
  if [ -z "$tag" ]; then
    log::error "[git::has_tag] tag is required"
    return 1
  fi

  git ls-remote --exit-code origin refs/tags/$tag >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
  else
    echo "true"
  fi
}

git::switch_tag() {
  local tag=$1
  if [ -z "$tag" ]; then
    log::error "[git::switch_tag] tag is required"
    return 1
  fi

  # apply proxy
  net::using_smart_proxy

  git fetch origin tag $tag >>/dev/null
  if [ "$?" != "0" ]; then
    log::error "[git::switch_tag] failed to fetch tag: $tag"
    return 1
  fi

  git checkout $tag >>/dev/null
}

git::use_version() {
  local version=$1
  if [ -z "$version" ]; then
    log::error "[git::use_version] version is required"
    return 1
  fi

  # if [ "$(git::has_tag $version)" != "true" ]; then
  #   log::error "[git::use_version] version($version) not found"
  #   return 1
  # fi

  git::switch_tag $version
}

# git::checkout checkouts git repository to context dir with specified branch/tag with commit.
# git::checkout@usage <branch/tag> <commit> <context> <url>
# git::checkout@example master e8f94341d90d53bebe736c5bc92a38950a777b5b /tmp/zmicro https://github.com/zcorky/zmicro
# git::checkout@example v1.0.1 e8f94341d90d53bebe736c5bc92a38950a777b5b /tmp/zmicro https://github.com/zcorky/zmicro
git::checkout() {
  local branch=$1
  local commit=$2
  local context=$3
  local url=$4

  local origin_context=$(pwd)
  local tmp_error_log=$(os::tmp_file)

  log::info "[$(timestamp)][git::checkout] preparing ..."
  log::info "[$(timestamp)][git::checkout]  => branch: $branch ..."
  log::info "[$(timestamp)][git::checkout]  => commit: $commit ..."
  log::info "[$(timestamp)][git::checkout]  => context: $context ..."
  log::info "[$(timestamp)][git::checkout]  => pwd: $origin_context ..."
  log::info "[$(timestamp)][git::checkout]  => err_log: $tmp_error_log ..."

  if [ -z "$branch" ]; then
    log::error "[$(timestamp)][git::checkout] branch is required"
    return 1
  fi

  if [ -z "$commit" ]; then
    log::error "[$(timestamp)][git::checkout] commit is required"
    return 1
  fi

  if [ -z "$context" ]; then
    log::error "[$(timestamp)][git::checkout] context is required"
    return 1
  fi

  if [ -z "$url" ]; then
    # log::error "[$(timestamp)][git::checkout] url is required"
    # return 1
    if [ -z "$context" ]; then
      log::error "[$(timestamp)][git::checkout] context is required when url is empty"
      return 1
    fi
  fi

  # if [ -d "$context" ]; then
  #   log::error "[$(timestamp)][git::checkout] context($context) is already exists, please remove it first."
  #   return 1
  # fi

  # apply proxy
  net::using_smart_proxy

  log::debug "HTTPS_PROXY: $HTTP_PROXY"

  if [ -d "$context" ] && [ -n "$url" ]; then
    local old_url=$(git::origin_url $context)
    if [ "$url" != "$old_url" ]; then
      log::info "[$(timestamp)][git::checkout] origin url not match (old: $old_url, new: $url) => remove ..."
      # log::error "[$(timestamp)][git::checkout] origin url not match (old: $old_url, new: $url)"
      # return 1
      rm -rf $context
    fi
  fi

  if [ ! -d "$context" ]; then
    log::info "[$(timestamp)][git::checkout] cloning repository ..."
    os::git clone $url $context >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][git::checkout] failed to checkout repo with (branch: $branch, commit: $commit)."
      cat $tmp_error_log
      return 1
    fi
  else
    cd $context

    # ensure clean
    log::info "[$(timestamp)][git::checkout] ensuring worktree clean ..."
    git checkout . >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][git::checkout] failed to ensure worktree clean."
      cat $tmp_error_log
      return 1
    fi

    log::info "[$(timestamp)][git::checkout] fetching origin ..."
    # os::git fetch origin $branch >>/dev/null 2>$tmp_error_log
    os::git fetch origin # >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][git::checkout] failed to git fetch ${branch}."
      # cat $tmp_error_log
      return 1
    fi
  fi

  cd $context

  log::info "[$(timestamp)][git::checkout] checkouting to branch($branch) with commit($commit) ..."
  git checkout -B $branch $commit >>/dev/null 2>$tmp_error_log
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][git::checkout] failed to checkout to branch($branch) with commit($commit)."
    cat $tmp_error_log
    return 1
  fi

  cd $origin_context
}

git::global_user() {
  git config --global user.name
}

git::global_email() {
  git config --global user.email
}

git::global_setup() {
  local git_user=$1
  local git_email=$2

  if [ -z "$git_user" ]; then
    git_user=$(git::global_user)
  fi

  if [ -z "$git_email" ]; then
    git_email=$(git::global_email)
  fi

  # credential
  git config --global credential.helper store
  # git config --global credential.helper 'cache --timeout=604800'
  # editor
  git config --global core.editor "vim"
  # default branch
  git config --global init.defaultbranch master
  # pull reabse
  git config --global pull.rebase false

  # if [ "$git_user" = "" ] || [ "$git_email" = "" ]; then
  #   log::warn "Config Git: git_user and git_email is required"
  #   exit 0
  # fi

  # local origin_name=$(git config --get user.name)
  if [ "$git_user" != "" ]; then
    git config --global user.name "${git_user}"
  else
    local origin=$(git::global_user)
    if [ -z "$origin" ]; then
      # Default
      git config --global user.name "${DEFAULT_GIT_USERNAME}"
    fi
  fi

  if [ "$git_email" != "" ]; then
    git config --global user.email "${git_email}"
  else
    local origin=$(git::global_email)
    if [ -z "$origin" ]; then
      git config --global user.email "${DEFAULT_GIT_EMAIL}"
    fi
  fi

  # pull strategies
  #   hint: Pulling without specifying how to reconcile divergent branches is
  #   hint: discouraged. You can squelch this message by running one of the following
  #   hint: commands sometime before your next pull:
  #   hint:
  #   hint:   git config pull.rebase false  # merge (the default strategy)
  #   hint:   git config pull.rebase true   # rebase
  #   hint:   git config pull.ff only       # fast-forward only
  #   hint:
  #   hint: You can replace "git config" with "git config --global" to set a default
  #   hint: preference for all repositories. You can also pass --rebase, --no-rebase,
  #   hint: or --ff-only on the command line to override the configured default per
  #   hint: invocation.
  git config --global pull.rebase false

  # fix git permissions
  git::fix_permissions
}

git::clone() {
  local path=$1
  local repository_url=$2
  local branch=$3

  if [ -z "$branch" ]; then
    branch="master"
  fi

  if [ -z "$path" ]; then
    log::error "[git::clone] path is required"
    return 1
  fi

  if [ -z "$repository_url" ]; then
    log::error "[git::clone] repository_url is required"
    return 1
  fi

  local tmp_error_log=$(os::tmp_file)

  if [ ! -d "$path" ]; then
    # clone
    log::debug "[git::clone] clone repo($repository_url) to $path ..."
    os::git clone --depth=1 -b $branch $repository_url $path >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[git::clone] failed to clone repo($repository_url) to $path ..."
      cat $tmp_error_log
      return 1
    fi
  else
    # update
    log::debug "[$(timestamp)][git::clone] update branch: $branch ..."
    if [ ! -w "$path" ]; then
      sudo chown -R $USER $path
    fi

    cd $path

    log::debug "[$(timestamp)][git::clone] fetching branch: $branch ..."
    os::git fetch origin $branch >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][git::clone] failed to git fetch ${branch}."
      cat $tmp_error_log
      return 1
    fi

    local current_branch=$(git::branch)
    if [ "$current_branch" != "$branch" ]; then
      log::debug "[$(timestamp)][git::clone] checkout branch: $branch ..."
      git checkout -b $branch origin/$branch 2>$error_log
      if [ "$?" != "0" ]; then
        log::error "[$(timestamp)][git::clone] failed to checkout branch: ${branch} ."
        cat $tmp_error_log
        return 1
      fi
    fi

    local error_log=$(os::tmp_file)
    log::debug "[$(timestamp)][git::clone] merge origin branch: $branch ..."
    git merge origin/$branch >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][git::clone] failed to merge origin branch: ${branch} ."
      cat $tmp_error_log
      return 1
    fi
  fi
}

git::update() {
  local tmp_error_log=$(os::tmp_file)
  local path=$1
  if [ -z "$path" ]; then
    path=$PWD
  fi

  if [ ! -d "$path/.git" ]; then
    log::error "[git::update] current dir is not a git repo (path: $path)"
    return 1
  fi

  # update
  log::debug "[$(timestamp)][git::update] update branch: $branch ..."
  if [ ! -w "$path" ]; then
    sudo chown -R $USER $path
  fi

  cd $path
  
  local current_branch=$(git::branch)

  log::debug "[$(timestamp)][git::update] fetching remote branch: $current_branch ..."
  os::git fetch origin $current_branch >>/dev/null 2>$tmp_error_log
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][git::update] failed to git fetch ${current_branch}."
    cat $tmp_error_log
    return 1
  fi

  local error_log=$(os::tmp_file)
  log::debug "[$(timestamp)][git::update] merge remote branch: $current_branch ..."
  git merge origin/$current_branch >>/dev/null 2>$tmp_error_log
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][git::update] failed to merge remote branch: ${current_branch}."
    cat $tmp_error_log
    return 1
  fi
}

git::has_branch() {
  local name=$1
  local repo=$2
  if [ -z "$name" ]; then
    log::error "[git::has_branch] name is required"
    return 1
  fi

  if [ -z "$repo" ]; then
    repo=$(git::origin_url)
  fi

  git::remote_has_branch $name $repo >>/dev/null
  if [ "$?" != "0" ]; then
    echo "false"
    return 1
  else
    echo "true"
    return 0
  fi
}

# git::check_token checks the git registry token exist.
# git::check_token@usage <registry>
# git::check_token@example git::check_token github.com
git::check_token() {
  local registry="$1"
  if [ -z "$registry" ]; then
    log::error "[git::check_token] registry is required"
    return 1
  fi

  if [ ! -f "$HOME/.git-credentials" ]; then
    log::error "[git::check_token] cannot find token for $registry, you need to login git with: zmicro login git <USERNAME> <TOKEN>"
    return 1
  fi

  local token=$(cat $HOME/.git-credentials | grep $registry | awk -F ':' '{print $3}' | awk -F '@' '{print $1}')
  if [ -z "$token" ]; then
    log::error "[git::check_token] cannot find token for $registry, you need to login github with: zmicro login git <USERNAME> <TOKEN>"
    return 1
  fi
}

# git::get_token gets the git registry token.
# git::get_token@usage <registry>
# git::get_token@example git::get_token github.com
git::get_token() {
  local registry="$1"
  if [ -z "$registry" ]; then
    echo ""
    return
  fi

  if [ ! -f "$HOME/.git-credentials" ]; then
    # log::error "[git::get_token] cannot find token for $registry, you need to login git with: zmicro login git <USERNAME> <TOKEN>"
    echo ""
    return
  fi

  local token=$(cat $HOME/.git-credentials | grep "$registry" | head -n 1 | awk -F ':' '{print $3}' | awk -F '@' '{print $1}')
  if [ -z "$token" ]; then
    # log::error "[git::get_token] cannot find token for $registry, you need to login git with: zmicro login git <USERNAME> <TOKEN>"
    return
  fi

  # echo $token
  case $registry in
  github.com)
    export GITHUB_TOKEN=$token
    ;;
  gitlab.com)
    export GITLAB_TOKEN=$token
    ;;
  bitbucket.org)
    export BITBUCKET_TOKEN=$token
    ;;
  gitee.com)
    export GIEE_TOKEN=$token
    ;;
  esac

  export GIT_TOKEN=$token
  echo "$token"
}

# git::get_commit_hash_by_tag gets the commit hash by git tag.
# git::get_commit_hash_by_tag@usage <tag>
# git::get_commit_hash_by_tag@example git::get_commit_hash_by_tag v1.0.0
git::get_commit_hash_by_tag() {
  local tag=$1
  if [ -z "$tag" ]; then
    log::error "[git::get_commit_hash_by_tag] tag is required"
    return 1
  fi

  git rev-list -n 1 $tag
}

# git::get_remote_commit_hash_by_branch gets the commit hash by git tag.
# git::get_remote_commit_hash_by_branch@usage <repo> <branch>
# git::get_remote_commit_hash_by_branch@example git::get_remote_commit_hash_by_branch https://github.com/zmicro-design/plugin-core-utils master
git::get_remote_commit_hash_by_branch() {
  local repo=$1
  local branch=$2

  if [ -z "$repo" ]; then
    log::error "[git::get_remote_commit_hash_by_branch] repo is required"
    return 1
  fi

  if [ -z "$branch" ]; then
    log::error "[git::get_remote_commit_hash_by_branch] branch is required"
    return 1
  fi

  # git rev-list -n 1 $branch
  git ls-remote --heads $repo $branch | awk '{print $1}'
}

# git::get_remote_commit_hash_by_tag gets the commit hash by git tag.
# git::get_remote_commit_hash_by_tag@usage <repo> <tag>
# git::get_remote_commit_hash_by_tag@example git::get_remote_commit_hash_by_tag https://github.com/zmicro-design/plugin-core-utils v1.0.0
git::get_remote_commit_hash_by_tag() {
  local repo=$1
  local tag=$2

  if [ -z "$repo" ]; then
    log::error "[git::get_remote_commit_hash_by_tag] repo is required"
    return 1
  fi

  if [ -z "$tag" ]; then
    log::error "[git::get_remote_commit_hash_by_tag] tag is required"
    return 1
  fi

  # git rev-list -n 1 $tag
  git ls-remote -t $repo $tag | awk '{print $1}'
}

# git::get_remote_latest_tag gets remote latest tag of the repository.
# git::get_remote_latest_tag@usage <repo> <tag>
# git::get_remote_latest_tag@example git::get_remote_latest_tag https://github.com/zmicro-design/plugin-core-utils
git::get_remote_latest_tag() {
  local repository=$1
  if [ -z "$repository" ]; then
    log::error "[git::get_remote_latest_tag] repository is required"
    return 1
  fi

  git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' $repository |
    tail -n 1 |
    awk -F 'refs/tags/' '{print $2}'
}

git::remote_has_branch() {
  local name=$1
  local repo=$2
  if [ -z "$name" ]; then
    log::error "[git::remote_has_branch] name is required"
    return 1
  fi

  if [ -z "$repo" ]; then
    repo=$(git::origin_url)
  fi

  local branch=$(os::git ls-remote --heads $repo $name)
  if [ "$?" != "0" ]; then
    echo "false"
    return 1
  fi

  if [ -z "$branch" ]; then
    echo "false"
    return 1
  else
    echo "true"
    return 0
  fi
}

# git::version gets git cli version.
# git::version@usage
# git::version@example
git::version() {
  # CentOS release 6.10 (Final) - git version 2.9.5
  # CentOS Linux release 7.9.2009 (Core) - git version 1.8.3.1
  # Ubuntu 22.04.1 LTS - git version 2.34.1
  # macOS 13.2.1 - git version 2.40.0
  echo "v$(git --version | awk '{print $3}')"
}

export -f git::commit_message
export -f git::commit_message_full
export -f git::commit_hash
export -f git::commit_hash_full
export -f git::commit_author
export -f git::commit_author_name
export -f git::commit_author_email
export -f git::commit_timestamp
export -f git::commit_timestamp_date
export -f git::commit_timestamp_ms
export -f git::commit_timestamp_human

export -f git::fix_permissions

export -f git::origin_url
export -f git::namespace
export -f git::basename
export -f git::repo_name

export -f git::branch
export -f git::tag
export -f git::commit

export -f git::is_changed
export -f git::is_added_before_commit
export -f git::is_ready_to_commit

export -f git::repo_url
export -f git::issue_url
export -f git::pull_request_url
export -f git::merge_request_url

export -f git::url_ssh_to_http

export -f git::has_tag
export -f git::switch_tag
export -f git::use_version

export -f git::checkout

export -f git::global_user
export -f git::global_email

export -f git::global_setup

export -f git::clone
export -f git::update

export -f git::has_branch

export -f git::check_token
export -f git::get_token

export -f git::get_commit_hash_by_tag

export -f git::get_remote_commit_hash_by_branch
export -f git::get_remote_commit_hash_by_tag
export -f git::get_remote_latest_tag

export -f git::remote_has_branch

export -f git::version
