#!/bin/bash

function test_git::commit_message() {
  local expected=$(git log -1 --pretty=%B -n 1 | sed -e 's/ /_/g' | sed -e 's/(/_/g' | sed -e 's/)/_/g')
  local received=$(git::commit_message | sed -e 's/ /_/g' | sed -e 's/(/_/g' | sed -e 's/)/_/g')

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::commit_message_full() {
  local expected=$(git log -1 --pretty=%B | sed -e 's/ /_/g' | sed -e 's/(/_/g' | sed -e 's/)/_/g')
  local received=$(git::commit_message_full | sed -e 's/ /_/g' | sed -e 's/(/_/g' | sed -e 's/)/_/g')

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::commit_hash() {
  local expected=$(git rev-parse --short=9 HEAD)
  local received=$(git::commit_hash)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::commit_author() {
  local expected=$(git show -s --format='%ae')
  local received=$(git::commit_author)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::commit_timestamp() {
  local expected=$(git show -s --format=%cd --date="format:%Y-%m-%d")
  local received=$(git::commit_timestamp)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::commit_timestamp_date() {
  local expected=$(git show -s --format=%cd --date="format:%Y-%m-%d")
  local received=$(git::commit_timestamp_date)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::commit_timestamp_ms() {
  local expected=$(git show -s --format=%cd --date="format:%s")
  local received=$(git::commit_timestamp_ms)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::commit_timestamp_human() {
  local expected=$(git show -s --format=%cd | sed -e 's/ /_/g' | sed -e 's/(/_/g' | sed -e 's/)/_/g')
  local received=$(git::commit_timestamp_human | sed -e 's/ /_/g' | sed -e 's/(/_/g' | sed -e 's/)/_/g')

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::namespace() {
  local expected="zmicro-design"
  local received=$(git::namespace)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::basename() {
  local expected="plugin-core-utils"
  local received=$(git::basename)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::origin_url() {
  local expected="https://github.com/zmicro-design/plugin-core-utils"
  local received=$(git::origin_url)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::repo_name() {
  local expected="zmicro-design/plugin-core-utils"
  local received=$(git::repo_name)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::branch() {
  local expected="$(git rev-parse --abbrev-ref HEAD)"
  local received=$(git::branch)

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::url_ssh_to_http() {
  local expected="http://zzz.com/zero/example"
  local received="$(git::url_ssh_to_http ssh://git@example.com:666/zero/example.git http://zzz.com)"

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"

  received="$(git::url_ssh_to_http git@example.com:zero/example.git http://zzz.com)"
  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"

  received="$(git::url_ssh_to_http https://example.com/zero/example.git http://zzz.com)"
  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"

  received="$(git::url_ssh_to_http https://example.com/zero/example.git http://zzz.com)"
  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "$expected" \
    "$received"
}

function test_git::checkout() {
  local url="https://github.com/zcorky/zmicro"
  local branch="v1.21.20"
  local context="/tmp/zmicro_core_utils_test_git_checkout"

  rm -rf $context

  git::checkout $url $branch $context

  testing::expect \
    "${FUNCNAME[0]} repo url" \
    "to_equal" \
    "$url" \
    "$(git::repo_url $context)"

  testing::expect \
    "${FUNCNAME[0]} branch" \
    "to_equal" \
    "$branch" \
    "$(git::tag $context)"

  # exist
  branch="v1.21.20"
  git::checkout $url $branch $context

  testing::expect \
    "${FUNCNAME[0]} repo url" \
    "to_equal" \
    "$url" \
    "$(git::repo_url $context)"

  testing::expect \
    "${FUNCNAME[0]} branch" \
    "to_equal" \
    "$branch" \
    "$(git::tag $context)"

  rm -rf $context
}
