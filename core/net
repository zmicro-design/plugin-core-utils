#!/bin/bash

net::is_github_visitable() {
  curl -I https://github.com --connect-timeout 3 >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
  else
    echo "true"
  fi
}

net::is_google_visitable() {
  curl -I https://google.com --connect-timeout 3 >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
  else
    echo "true"
  fi
}

net::is_in_china() {
  if [ "$(net::is_google_visitable)" = "false"]; then
    echo "true"
  else
    echo "false"
  fi
}

net::is_ip() {
  os::is_ip $1
}

net::get_domain_ip() {
  local domain=$1
  if [ -z "$domain" ]; then
    log::error "domain is required"
    exit 1
  fi

  # dig install in ubuntu/centos https://cloud.tencent.com/developer/article/1618605
  if [ "$(os::has_command dig)" = "false" ]; then
    # ubuntu
    if [ "$(os::has_command apt)" = "true" ]; then
      sudo apt install -y dnsutils
    # centos
    elif [ "$(os::has_command yum)" = "true" ]; then
      sudo yum install -y bind-utils
    # alpine
    elif [ "$(os::has_command apk)" = "true" ]; then
      sudo apk add -U bind-tools
    # macos
    elif [ "$(os::has_command brew)" = "true" ]; then
      brew install dnsutils
    # unknown
    else
      log::error "unknown os to install dig"
      exit 1
    fi
  fi

  dig +short $domain @114.114.114.114
}

net::is_url_visitable() {
  local url=$1
  if [ -z "$url" ]; then
    log::error "[net::is_url_visitable] url is required"
    return
  fi

  curl -I $1 --connect-timeout 3 >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
  else
    echo "true"
  fi
}

net::is_port_visitable() {
  local ip=$1
  local port=$2

  if [ -z "$ip" ]; then
    log::error "ip is required"
    exit 1
  fi

  if [ -z "$port" ]; then
    log::error "port is required"
    exit 1
  fi

  # no a valid ip, search dns
  if [ "$(net::is_ip $ip)" = "false" ]; then
    ip=$(net::get_domain_ip $ip)
  fi

  if [ "$(os::has_command nc)" = "true" ]; then
    nc -z -v -n -w 1 $ip $port >>/dev/null 2>&1
    if [ "$?" != "0" ]; then
      echo "false"
    else
      echo "true"
    fi
    return
  fi

  # @TODO
  echo "false"
}

net::get_ip() {
  # dig +short myip.opendns.com @resolver1.opendns.com
  local ip=$(curl https://ip.zcorky.com 2>/dev/null)
  if [ -n "$ip" ]; then
    echo $ip
    return
  fi

  which dig >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    if [ "$(os::is_centos)" = "true" ]; then
      pm install -yy bind-utils >>/dev/null 2>&1
    else
      pm install -yy dig >>/dev/null 2>&1
    fi
  fi

  # fallback
  dig +short myip.opendns.com @resolver1.opendns.com
}

net::get_ip_internal() {
  # reference: https://apple.stackexchange.com/questions/20547/how-do-i-find-my-ip-address-from-the-command-line
  if [ "$(os::is_macos)" = "true" ]; then
    ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'
    return
  fi

  echo $(hostname -I)
}

net::using_smart_proxy() {
  # if no proxy is specified, check the proxy settings
  if [ -z "$HTTPS_PROXY" ]; then
    # @TODO auto check proxy and using
    local PROXY_IP=""
    local PROXY_PORT=""
    # CUSTOM
    if [ "$(zmicro config get PROXY_IP)" != "" ]; then
      PROXY_IP="$(zmicro config get PROXY_IP)"
      PROXY_PORT="$(zmicro config get PROXY_PORT)"

      if [ "$(net::is_ip $PROXY_IP)" = "true" ]; then
        if [ "$(net::is_port_visitable $PROXY_IP $PROXY_PORT)" != "true" ]; then
          PROXY_IP=""
          PROXY_PORT=""
        fi
      else
        curl -s -I http://$PROXY_IP:$PROXY_PORT --connect-timeout 3 >>/dev/null 2>&1
        if [ "$?" != "0" ]; then
          PROXY_IP=""
          PROXY_PORT=""
        fi
      fi
    else
      # ClashZ
      # nc -z -v -n -w 1 127.0.0.1 17890 >>/dev/null 2>&1
      # if [ "$(net::is_port_visitable 127.0.0.1 17890)" = "true" ]; then
      #   PROXY_IP="127.0.0.1"
      #   PROXY_PORT="17890"
      # else
      #   # ClashX
      #   # nc -z -v -n -w 1 127.0.0.1 7890 >>/dev/null 2>&1
      #   if [ "$(net::is_port_visitable 127.0.0.1 7890)" = "0" ]; then
      #     PROXY_IP="127.0.0.1"
      #     PROXY_PORT="7890"
      #   else
      #     # ShadowsocksX-NG
      #     # nc -z -v -n -w 1 127.0.0.1 1087 >>/dev/null 2>&1
      #     if [ "$(net::is_port_visitable 127.0.0.1 1087)" = "0" ]; then
      #       PROXY_IP="127.0.0.1"
      #       PROXY_PORT="1087"
      #     fi
      #   fi
      # fi
      #
      PROXY_PORT=$(net::try_to_get_proxy_port)
      if [ "$PROXY_PORT" != "" ]; then
        PROXY_IP="127.0.0.1"
      fi
    fi

    if [ -n "$PROXY_IP" ] && [ -n "$PROXY_PORT" ]; then
      log::debug "[$(timestamp)] using proxy: $PROXY_IP:$PROXY_PORT"
      export PROXY_IP=$PROXY_IP
      export PROXY_PORT=$PROXY_PORT
      #
      export https_proxy=http://$PROXY_IP:$PROXY_PORT http_proxy=http://$PROXY_IP:$PROXY_PORT all_proxy=socks5://$PROXY_IP:$PROXY_PORT
      export HTTPS_PROXY=http://$PROXY_IP:$PROXY_PORT HTTP_PROXY=http://$PROXY_IP:$PROXY_PORT ALL_PROXY=socks5://$PROXY_IP:$PROXY_PORT
    fi
  fi
}

net::try_to_get_proxy_port() {
  local network=${1:-"127.0.0.1"}
  local ports=(
    17890 # ClashZ
    7890  # ClashX
    1087  # ShadowsocksX-NG
  )

  for port in ${ports[@]}; do
    if [ "$(net::is_port_visitable $network $port)" = "true" ]; then
      echo $port
      return
    fi
  done
}

export -f net::is_in_china
export -f net::is_github_visitable
export -f net::is_google_visitable

export -f net::is_ip
export -f net::get_domain_ip

export -f net::is_url_visitable
export -f net::is_port_visitable

export -f net::get_ip
export -f net::get_ip_internal

export -f net::using_smart_proxy
export -f net::try_to_get_proxy_port
