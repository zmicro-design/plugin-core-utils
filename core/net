#!/bin/bash

net::is_github_visitable() {
  curl -I https://github.com --connect-timeout 3 >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
  else
    echo "true"
  fi
}

net::is_google_visitable() {
  curl -I https://google.com --connect-timeout 3 >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
  else
    echo "true"
  fi
}

net::is_in_china() {
  if [ "$(net::is_google_visitable)" = "false"]; then
    echo "true"
  else
    echo "false"
  fi
}

net::is_ip() {
  os::is_ip $1
}

net::get_domain_ip() {
  local domain=$1
  if [ -z "$domain" ]; then
    log::error "domain is required"
    exit 1
  fi

  # dig install in ubuntu/centos https://cloud.tencent.com/developer/article/1618605
  if [ "$(os::has_command dig)" = "false" ]; then
    # ubuntu
    if [ "$(os::has_command apt)" = "true" ]; then
      sudo apt install -y dnsutils
    # centos
    elif [ "$(os::has_command yum)" = "true" ]; then
      sudo yum install -y bind-utils
    # alpine
    elif [ "$(os::has_command apk)" = "true" ]; then
      sudo apk add -U bind-tools
    # macos
    elif [ "$(os::has_command brew)" = "true" ]; then
      brew install dnsutils
    # unknown
    else
      log::error "unknown os to install dig"
      exit 1
    fi
  fi

  dig +short $domain @114.114.114.114
}

net::is_url_visitable() {
  local url=$1
  if [ -z "$url" ]; then
    log::error "[net::is_url_visitable] url is required"
    return
  fi

  os::curl -I $1 --connect-timeout 3 >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
  else
    echo "true"
  fi
}

net::is_port_visitable() {
  local ip=$1
  local port=$2

  if [ -z "$ip" ]; then
    log::error "ip is required"
    exit 1
  fi

  if [ -z "$port" ]; then
    log::error "port is required"
    exit 1
  fi

  # no a valid ip, search dns
  if [ "$(net::is_ip $ip)" = "false" ]; then
    ip=$(net::get_domain_ip $ip)
  fi

  if [ "$(os::has_command nc)" = "true" ]; then
    os::nc -z -v -n -w 1 $ip $port >>/dev/null 2>&1
    if [ "$?" != "0" ]; then
      echo "false"
    else
      echo "true"
    fi
    return
  fi

  # @TODO
  echo "false"
}

net::get_ip() {
  # dig +short myip.opendns.com @resolver1.opendns.com
  local ip=$(curl https://ip.zcorky.com 2>/dev/null)
  if [ -n "$ip" ]; then
    echo $ip
    return
  fi

  if [ "$(os::has_command dig)" != "true" ]; then
    if [ "$(os::is_centos)" = "true" ]; then
      pm install -yy bind-utils >>/dev/null 2>&1
    else
      pm install -yy dig >>/dev/null 2>&1
    fi
  fi

  # fallback
  dig +short myip.opendns.com @resolver1.opendns.com
}

net::get_ip_internal() {
  # reference: https://apple.stackexchange.com/questions/20547/how-do-i-find-my-ip-address-from-the-command-line
  if [ "$(os::is_macos)" = "true" ]; then
    ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}' | head -n 1
    return
  fi

  # hostname
  if [ "$(os::has_command hostname)" = "false" ]; then
    # reference: https://commandnotfound.cn/linux/1/347/hostname-%E5%91%BD%E4%BB%A4
    pm install -y hostname >>/dev/null 2>&1
  fi

  if [ "$(os::is_alpine)" = "true" ]; then
    ip route | awk '/default/ {print $3}'
    return
  fi

  echo $(hostname -I)

  # # ip
  # if [ "$(os::has_command ip)" = "false" ]; then
  #   # reference: https://stackoverflow.com/questions/42679270/docker-bash-ip-command-not-found
  #   pm install -yqq net-tools >>/dev/null 2>&1
  # fi

  # # ifconfig
  # if [ "$(os::has_command ip)" = "false" ]; then
  #   # reference: https://stackoverflow.com/questions/42679270/docker-bash-ip-command-not-found
  #   pm install -yqq iproute2 >>/dev/null 2>&1
  # fi

  # ip route | awk '/default/ {print $3}'
}

net::using_smart_proxy() {
  # if no proxy is specified, check the proxy settings
  if [ -z "$HTTPS_PROXY" ]; then
    # if no PROXY_IP or PROXY_PORT found, try to get PROXY_IP and PROXY_PORT from config
    if [ -z "$PROXY_IP" ] || [ -z "$PROXY_PORT" ]; then
      # @TODO auto check proxy and using
      export PROXY_IP=${PROXY_IP}
      export PROXY_PORT=${PROXY_PORT}
      # CUSTOM
      if [ "$(config::get PROXY_IP)" != "" ]; then
        PROXY_IP="$(config::get PROXY_IP)"
        PROXY_PORT="$(config::get PROXY_PORT)"

        if [ "$(net::is_ip $PROXY_IP)" = "true" ]; then
          if [ "$(net::is_port_visitable $PROXY_IP $PROXY_PORT)" != "true" ]; then
            PROXY_IP=""
            PROXY_PORT=""
          fi
        else
          curl -s -I http://$PROXY_IP:$PROXY_PORT --connect-timeout 3 >>/dev/null 2>&1
          if [ "$?" != "0" ]; then
            PROXY_IP=""
            PROXY_PORT=""
          fi
        fi
      else
        PROXY_PORT=$(net::try_to_get_proxy_port)
        if [ "$PROXY_PORT" != "" ]; then
          PROXY_IP="127.0.0.1"
        fi
      fi
    fi

    # found PROXY_IP and PROXY_PORT, apply the proxy settings
    if [ -n "$PROXY_IP" ] && [ -n "$PROXY_PORT" ]; then
      log::debug "[$(timestamp)] using proxy: $PROXY_IP:$PROXY_PORT"
      export PROXY_IP=$PROXY_IP
      export PROXY_PORT=$PROXY_PORT

      net::use_proxy $PROXY_IP $PROXY_PORT
    fi
  fi
}

net::use_proxy() {
  local PROXY_IP=$1
  local PROXY_PORT=$2

  if [ -z "$PROXY_IP" ]; then
    log::error "[$(timestamp)] PROXY_IP is required"
    return 1
  fi

  if [ -z "$PROXY_PORT" ]; then
    log::error "[$(timestamp)] PROXY_PORT is required"
    return 1
  fi

  export https_proxy=http://$PROXY_IP:$PROXY_PORT http_proxy=http://$PROXY_IP:$PROXY_PORT all_proxy=socks5://$PROXY_IP:$PROXY_PORT
  export HTTPS_PROXY=http://$PROXY_IP:$PROXY_PORT HTTP_PROXY=http://$PROXY_IP:$PROXY_PORT ALL_PROXY=socks5://$PROXY_IP:$PROXY_PORT
}

net::use_proxy_inlets() {
  # @TODO
  net::use_proxy inlets.zcorky.com 20099
}

net::try_to_get_proxy_port() {
  local network=${1:-"127.0.0.1"}
  local ports=(
    17890 # ClashZ
    7890  # ClashX
    1087  # ShadowsocksX-NG
  )

  for port in ${ports[@]}; do
    if [ "$(net::is_port_visitable $network $port)" = "true" ]; then
      echo $port
      return
    fi
  done
}

net::status_code() {
  local url=$1
  if [ -z "$url" ]; then
    log::error "[net::status_code] url is required"
    return 1
  fi

  # @TODO bug this will download url, if it is huge package, too slow.
  # os::curl -s -o /dev/null -w "%{http_code}" $url

  # example: curl -s -I https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-arm64.tar.gz | head -n 1 | awk '{print $2}'
  # os::curl -s -I $url 2>/dev/null | head -n 1 | awk '{print $2}'

  net::using_smart_proxy >>/dev/null 2>&1

  curl -sL -I $url -w '%{http_code}\n' -o /dev/null 2>/dev/null
}

net::is_not_found() {
  local url=$1
  if [ -z "$url" ]; then
    log::error "[net::is_not_found] url is required"
    return 1
  fi

  if [ "$(net::status_code $url)" = "404" ]; then
    echo "true"
  else
    echo "false"
  fi
}

# net::iftop monitors the realtime traffic of every tcp and udp.
net::iftop() {
  if [ "$(os::has_command iftop)" != "true" ]; then
    pm install -y iftop
  fi

  sudo iftop "$@"
}

# net::nethogs monitors the realtime traffic of every process.
net::nethogs() {
  if [ "$(os::has_command nethogs)" != "true" ]; then
    pm install -y nethogs
  fi

  sudo nethogs "$@"
}

# net::nload monitors the realtime traffic of every network card.
net::nload() {
  if [ "$(os::has_command nload)" != "true" ]; then
    pm install -y nload
  fi

  sudo nload "$@"
}

# net::mtr is used to comprehensively diagnose the quality of the network reaching the destination address.
net::mtr() {
  if [ "$(os::has_command mtr)" != "true" ]; then
    pm install -y mtr
  fi

  sudo mtr "$@"
}

# net::nmcli is used to manage network.
net::nmcli() {
  if [ "$(os::has_command nmcli)" != "true" ]; then
    pm install -y network-manager
  fi

  sudo nmcli "$@"
}

# net::monitor_speed_of_interface monitors the speed of the specify interface
# net::monitor_speed_of_interface@usage <interface>
# net::monitor_speed_of_interface@example eth0
# net::monitor_speed_of_interface@example ens33
# net::monitor_speed_of_interface@example wlo1
net::monitor_speed_of_interface() {
  local intf=$1
  if [ -z "$intf" ]; then
    log::error "[$(timestamp)] interface is required"
    return 1
  fi
  
  if [ "$(os::has_command tcpdump)" != "true" ]; then
    pm install -y tcpdump
  fi

  if [ "$(os::has_command pv)" != "true" ]; then
    pm install -y pv
  fi

  sudo tcpdump -i $intf -w - | pv -bert > /dev/null
}

# net::top monitors the network like monitor process with top (os::top)
# net::top@usage
# net::top@example
net::top() {
  net::iftop "$@"
}

export -f net::is_in_china
export -f net::is_github_visitable
export -f net::is_google_visitable

export -f net::is_ip
export -f net::get_domain_ip

export -f net::is_url_visitable
export -f net::is_port_visitable

export -f net::get_ip
export -f net::get_ip_internal

export -f net::use_proxy
export -f net::use_proxy_inlets
export -f net::using_smart_proxy
export -f net::try_to_get_proxy_port

export -f net::status_code
export -f net::is_not_found

export -f net::iftop
export -f net::nethogs
export -f net::nload

export -f net::mtr
export -f net::nmcli

export -f net::monitor_speed_of_interface

export -f net::top
