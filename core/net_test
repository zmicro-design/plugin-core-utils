#!/bin/bash

function test_net::using_smart_proxy() {
  if [ -n "$HTTPS_PROXY" ]; then
    export HTTPS_PROXY=""
    export HTTP_PROXY=""
    export ALL_PROXY=""
  fi

  local ORIGIN_PROXY_IP=$PROXY_IP
  local ORIGIN_PROXY_PORT=$PROXY_PORT
  local ORIGIN_CONFIG_PROXY_IP=$(config::get PROXY_IP)
  local ORIGIN_CONFIG_PROXY_PORT=$(config::get PROXY_PORT)

  config::set PROXY_IP httpbin.zcorky.com
  config::set PROXY_PORT 80

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "" \
    "$HTTPS_PROXY"

  net::using_smart_proxy

  testing::expect \
    "${FUNCNAME[0]}" \
    "to_equal" \
    "http://httpbin.zcorky.com:80" \
    "$HTTPS_PROXY"

  if [ "$ORIGIN_CONFIG_PROXY_IP" != "" ]; then
    config::set PROXY_IP $ORIGIN_CONFIG_PROXY_IP
    config::set PROXY_PORT $ORIGIN_CONFIG_PROXY_PORT
  else
    config::remove PROXY_IP
    config::remove PROXY_PORT
  fi

  export PROXY_IP=$ORIGIN_PROXY_IP
  export PROXY_PORT=$ORIGIN_PROXY_PORT
  if [ "$PROXY_IP" != "" ]; then
    export https_proxy=http://$PROXY_IP:$PROXY_PORT http_proxy=http://$PROXY_IP:$PROXY_PORT all_proxy=socks5://$PROXY_IP:$PROXY_PORT
    export HTTPS_PROXY=http://$PROXY_IP:$PROXY_PORT HTTP_PROXY=http://$PROXY_IP:$PROXY_PORT ALL_PROXY=socks5://$PROXY_IP:$PROXY_PORT
  else
    export https_proxy= http_proxy= all_proxy=
    export HTTPS_PROXY= HTTP_PROXY= ALL_PROXY=
  fi
}

function test_net::status_code() {
  testing::expect \
    "${FUNCNAME[0]} 200" \
    "to_equal" \
    "200" \
    "$(net::status_code https://httpbin.zcorky.com/)"

  testing::expect \
    "${FUNCNAME[0]} 404" \
    "to_equal" \
    "404" \
    "$(net::status_code https://httpbin.zcorky.com/404)"

  testing::expect \
    "${FUNCNAME[0]} 200 nodejs" \
    "to_equal" \
    "200" \
    "$(net::status_code https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-arm64.tar.gz)"

  testing::expect \
    "${FUNCNAME[0]} 404 nodejs" \
    "to_equal" \
    "404" \
    "$(net::status_code https://nodejs.org/dist/v16.18.0/node-v16.18.0-darwin-arm64.tar.gzx)"
}

function test_net::is_not_found() {
  testing::expect \
    "${FUNCNAME[0]} found" \
    "to_equal" \
    "false" \
    "$(net::is_not_found https://httpbin.zcorky.com/)"

  testing::expect \
    "${FUNCNAME[0]} not found" \
    "to_equal" \
    "true" \
    "$(net::is_not_found https://httpbin.zcorky.com/404)"
}
