#!/bin/bash

notify::feishu() {
  local url=$1
  local title=$2
  local message=$3
  if [ -z "$url" ]; then
    # log::error "[notify::feishu] url is required"
    exit 1
  fi

  local data_part1='{"msg_type":"post","content":{"post":{"zh_cn":{"title":"'
  local data_part2='","content":[[{"tag": "text", "text": "'
  local data_part3='" }]]}}}}'

  local data="${data_part1}${title}${data_part2}${message}${data_part3}"

  # echo "data: $data"
  local tmp_file=/tmp/$(os::random_string).json

  echo "$data" >$tmp_file

  if [ "$LOG_LEVEL" = "debug" ]; then
    log::debug ""
    log::debug "POST $url"
    log::debug ""
    log::debug "$(cat $tmp_file)"
    log::debug ""
    log::debug "tmp_file: $tmp_file"

    curl \
      -X POST \
      -H "Content-Type: application/json" \
      -d @"${tmp_file}" \
      $url

    rm -rf $tmp_file
    return
  fi

  curl \
    -X POST \
    -H "Content-Type: application/json" \
    -d @"${tmp_file}" \
    $url >>/dev/null 2>&1

  rm -rf $tmp_file
}

notify::logs() {
  local url=$1
  local title=$2
  local data=$3
  if [ -z "$url" ]; then
    # log::error "[notify::feishu] url is required"
    exit 1
  fi

  local tmp_file=/tmp/$(os::random_string).json

  echo "$data" >$tmp_file

  if [ "$LOG_LEVEL" = "debug" ]; then
    log::debug ""
    log::debug "POST $url"
    log::debug
    log::debug "$(cat $tmp_file)"
    log::debug ""
    log::debug "tmp_file: $tmp_file"

    curl \
      -X POST \
      -H "Content-Type: application/json" \
      -d @"${tmp_file}" \
      $url

    rm -rf $tmp_file
    return
  fi

  curl \
    -X POST \
    -H "Content-Type: application/json" \
    -d @"${tmp_file}" \
    $url >>/dev/null 2>&1

  rm -rf $tmp_file
}

notify::update::now() {
  local version_change=$@
  local ip=$(os::network_ip)
  local user=$(os::username)
  local release="-"
  local message=$(os::info)
  local url=$ZMICRO_UPDATE_REPORT_URL
  local log_url=$ZMICRO_UPDATE_REPORT_LOG_URL

  if [ "$(os::is_macos)" != "true" ]; then
    release=$(os::release)
  fi

  notify::feishu $url "[Update][${version_change}] $ip - $user" "$message"

  notify::logs $log_url "[Update][${version_change}] $ip - $user" "$(os::info_json)"
}

notify::install() {
  # ignore ci
  if [ "$(os::is_ci)" = "true" ]; then
    return
  fi

  local ip=$(os::network_ip)
  local user=$(os::username)
  local message=$(os::info)
  local log_url=$ZMICRO_INSTALL_REPORT_LOG_URL

  notify::feishu $ZMICRO_INSTALL_REPORT_URL "[Install] $ip - $user" "$message"

  notify::logs $log_url "[Install][$user] $ip" "$(os::info_json)"
}

notify::update() {
  # ignore ci
  if [ "$(os::is_ci)" = "true" ]; then
    return
  fi

  if [ "$(os::is_macos)" = "true" ]; then
    notify::update::now "$@"
    return
  fi

  # @TODO avoid too many request at the same time
  local sleep_time=$(os::random_int 600)
  log::debug "[$(timestamp)][notify::update] waiting time: $sleep_time"
  sleep $sleep_time

  notify::update::now "$@"
}

notify::login() {
  local user=$(os::username)
  local log_path=$ZMICRO_LOG_PATH/lastlogin.${user}.log

  # first login ignore
  if [ ! -f "$log_path" ]; then
    echo $(date +%s) >$log_path
    return
  fi

  # do not notify in 5 minutes
  local lastlogin=$(cat $log_path)
  if [ -n "$lastlogin" ] && [ "$(timestamp::in_x_minutes 30 $lastlogin)" = "true" ]; then
    return
  fi

  local ip=$(os::network_ip)
  local internal_ip=$(os::network_ip_internal)
  local company=$(os::hostname)
  local url=$ZMICRO_LOGIN_REPORT_URL
  local log_url=$ZMICRO_LOGIN_REPORT_LOG_URL
  local ssh=$SSH_CLIENT
  local shell=$SHELL
  local timestamp=$(os::timestamp)
  local zmicro_version=$(version::zmicro)
  local zmicro_version_detail=$(version::zmicro_detail)
  local device=$(os::device)
  local load=$(os::usage)

  # echo "notify::login"

  echo $(date +%s) >$log_path
  if [ "$?" != "0" ]; then
    log::error "[notify::login] failed to write log, maybe disk is full, skip."
    return
  fi

  local key=/${user}

  if [ -z "$ssh" ]; then
    ssh=$SSH_CONNECTION
  fi

  export NO_COLOR=true
  if [ "$(os::is_workspace)" = "true" ]; then
    notify::feishu $url "[Login][workspace: ${company}][$user] $ip" "user: $user\nshell: $shell\nmachine ip: $ip\ninternal ip: $internal_ip\nlogin ip: $ssh\nzmicro: $(version::main)\ndevice: ${device}\nload: ${load}\ntimestamp: $timestamp"
  else
    notify::feishu $url "[Login][$user] $ip" "user: $user\nshell: $shell\nmachine ip: $ip\ninternal ip: $internal_ip\nlogin ip: $ssh\nzmicro: $(version::main)\ndevice: ${device}\nload: ${load}\ntimestamp: $timestamp"
  fi

  local log_json=$(
    cat <<-END
{
  "ip": "$ip",
  "internal_ip": "$internal_ip",
  "user": "$user",
  "shell": "$shell",
  "login_ip": "$ssh",
  "zmicro_version": "$zmicro_version",
  "zmicro_version_detail": "$zmicro_version_detail",
  "device": "${device}",
  "load": "${load}",
  "system_timestamp": "$timestamp"
}
END
  )

  notify::logs $log_url "[Login][$user] $ip" "$log_json"
}

notify::login_register() {
  local sshrc=/etc/ssh/sshrc
  if [ ! -d "/etc/ssh" ]; then
    sudo mkdir -p /etc/ssh
  fi

  if [ ! -f "$sshrc" ] || [ ! -w "$sshrc" ]; then
    # sudo touch $sshrc
    echo "#!/bin/bash" | fs::write $sshrc
    sudo chmod +x $sshrc
  fi

  local title="LOGIN NOTIFY"
  cat $sshrc | grep "$title" >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    local text=$(
      cat <<-END

# $title
NO_LOG=true zmicro fn notify::login >> /dev/null 2>&1 &
END
    )

    echo "$text" | fs::write -a $sshrc
  fi
}

notify::login_unregister() {
  local sshrc=/etc/ssh/sshrc
  if [ ! -f "$sshrc" ]; then
    exit 0
  fi

  local title="LOGIN NOTIFY"
  cat $sshrc | grep "$title" >>/dev/null 2>&1
  fs::remove_line_has_str $sshrc "$title"
  fs::remove_line_has_str $sshrc "notify::login"
}

notify::check_enable() {
  local type=$1
  if [ -z "$type" ]; then
    log::error "[notify::check_enable] type is required"
    exit 1
  fi

  local full_env_name=NOTIFY_${type}
  if [ "$(config::global:get $full_env_name)" = "false" ]; then
    echo "false"
  else
    echo "true"
  fi
}

notify::if_not_enable_then_turn_off() {
  local type=$1
  local fn=$2
  if [ -z "$type" ]; then
    log::error "[notify::if_not_enable_then_turn_off] type is required"
    exit 1
  fi

  if [ -z "$fn" ]; then
    log::error "[notify::if_not_enable_then_turn_off] fn is required"
    exit 1
  fi

  if [ "$(notify::check_enable $type)" = "false" ]; then
    $fn
  fi
}

notify::login_register_check() {
  if [ "$(notify::check_enable LOGIN)" = "false" ]; then
    notify::login_unregister
  else
    notify::login_register
  fi
}

notify::update_check() {
  local origin_version=$1
  local new_version=$2

  if [ -z "$origin_version" ]; then
    log::error "[notify::update_check] origin_version is required"
    exit 1
  fi

  if [ -z "$new_version" ]; then
    log::error "[notify::update_check] new_version is required"
    exit 1
  fi

  # # check notify enable
  # if [ "$(notify::check_enable UPDATE)" = "false" ]; then
  #   return
  # fi

  export ZMICRO_VERSION_ORIGIN=$origin_version
  export ZMICRO_VERSION_NEW=$new_version

  # send notification
  if [ "$origin_version" = "$new_version" ]; then
    notify::update "no change: $new_version"
  else
    notify::update "$origin_version => $new_version"
  fi
}

notify::update_enable() {
  config::global:set NOTIFY_UPDATE true
}

notify::update_disable() {
  config::global:set NOTIFY_UPDATE false
}

notify::login_enable() {
  config::global:set NOTIFY_LOGIN true
}

notify::login_disable() {
  config::global:set NOTIFY_LOGIN false
}

export -f notify::feishu

export -f notify::logs

export -f notify::install

export -f notify::update
export -f notify::update::now

export -f notify::login

export -f notify::login_register
export -f notify::login_unregister

export -f notify::check_enable
export -f notify::if_not_enable_then_turn_off

export -f notify::update_check
export -f notify::login_register_check

export -f notify::update_enable
export -f notify::update_disable

export -f notify::login_enable
export -f notify::login_disable
