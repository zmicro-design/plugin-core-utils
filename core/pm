#!/bin/bash

pm() {
  # apply proxy
  net::using_smart_proxy

  # MacOS
  if [ "$(os::is_macos)" = "true" ]; then
    if [ "$(os::has_command brew)" != "true" ]; then
      log::info "[$(timestamp)] homebrew is not installed, installing ..."
      zmicro package install brew
    fi

    # ignore -yqq in mac
    local args=""
    for arg in $@; do
      case $arg in
      -yqq) ;;
      -y) ;;
      *)
        args="$args $arg"
        ;;
      esac
    done

    brew $args
    return
  fi

  # CentOS
  if [ "$(os::has_command yum)" = "true" ]; then
    sudo yum $@
    return
  fi

  # Ubuntu/Debian
  if [ "$(os::has_command apt)" = "true" ]; then
    # apt proxy support
    # stackoverflow: https://askubuntu.com/questions/7470/how-to-run-sudo-apt-get-update-through-proxy-in-commandline
    if [ -n "$HTTP_PROXY" ]; then
      sudo apt -o Acquire::http::Proxy="$HTTP_PROXY" $@
      return
    fi

    sudo apt $@
    return
  fi

  # Alpine
  if [ "$(os::has_command apk)" = "true" ]; then
    local args=""
    for arg in $@; do
      case $arg in
      install)
        args="$args add"
        ;;
      -yqq) ;;
      -y) ;;
      *)
        args="$args $arg"
        ;;
      esac
    done

    sudo apk $args
    return
  fi

  # Fedora
  if [ "$(os::has_command dnf)" = "true" ]; then
    sudo dnf $@
    return
  fi

  # Archlinux
  if [ "$(os::has_command pacman)" = "true" ]; then
    # ignore -yqq in mac
    local args=""
    for arg in $@; do
      case $arg in
      -yqq) ;;
      -y) ;;
      install)
        args="$args -Syu --noconfirm"
        ;;
      *)
        args="$args $arg"
        ;;
      esac
    done

    sudo pacman $args
    return
  fi

  # Flatpak
  if [ "$(os::has_command flatpak)" = "true" ]; then
    # ignore -yqq in mac
    local args=""
    for arg in $@; do
      case $arg in
      -yqq) ;;
      -y) ;;
      *)
        args="$args $arg"
        ;;
      esac
    done

    sudo flatpak $args
    return
  fi

  # Scoop
  if [ "$(os::has_command scoop)" = "true" ]; then
    # ignore -yqq in mac
    local args=""
    for arg in $@; do
      case $arg in
      -yqq) ;;
      -y) ;;
      *)
        args="$args $arg"
        ;;
      esac
    done

    sudo scoop $args
    return
  fi

  # Winget
  if [ "$(os::has_command winget)" = "true" ]; then
    # ignore -yqq in mac
    local args=""
    for arg in $@; do
      case $arg in
      -yqq) ;;
      -y) ;;
      *)
        args="$args $arg"
        ;;
      esac
    done

    sudo winget $args
    return
  fi

  log::error "[pm] unknown system package manager"
  exit 1
}

# homebrew
pm::brew() {
  if [ "$(os::has_command brew)" != "true" ]; then
    if [ "$GITHUB_ACTIONS" = "true" ]; then
      echo "in GitHub Actions, not necessary to change homebrew mirror"
    else
      # mirror: https://github.com/eryajf/Thanks-Mirror#homebrew
      export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
      export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
      export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
    fi

    sudo curl -o- https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash
  fi

  brew $@
}

# ubuntu apt
pm::apt() {
  if [ "$(os::is_ubuntu)" != "true" ]; then
    log::error "[pm::apt] only support ubuntu"
    return 1
  fi

  sudo apt $@
}

# centos
pm::yum() {
  if [ "$(os::is_centos)" != "true" ]; then
    log::error "[pm::yum] only support centos"
    return 1
  fi

  sudo yum $@
}

# alpine
pm::apk() {
  if [ "$(os::is_alpine)" != "true" ]; then
    log::error "[pm::apk] only support alpine"
    return 1
  fi

  # sudo apk $@
  apk $@
}

# archlinux
pm::pacman() {
  if [ "$(os::is_archlinux)" != "true" ]; then
    log::error "[pm::pacman] only support archlinux"
    return 1
  fi

  sudo pacman $@
}

# fedora
pm::dnf() {
  if [ "$(os::is_fedora)" != "true" ]; then
    log::error "[pm::dnf] only support fedora"
    return 1
  fi

  sudo dnf $@
}

# node npm
pm::npm() {
  # ZMICRO_NVM
  [ -s "/usr/local/lib/zmicro/plugins/nvm/source" ] && \. /usr/local/lib/zmicro/plugins/nvm/source

  if [ "$(os::is_nodejs_installed)" = "false" ]; then
    zpackage install nodejs
  fi

  # @TODO
  if [ "$(net::is_google_visitable)" = "false" ]; then
    export NPM_CONFIG_REGISTRY=https://registry.npmmirror.com
  fi

  npm $@
}

# node cnpm
pm::cnpm() {
  # ZMICRO_NVM
  [ -s "/usr/local/lib/zmicro/plugins/nvm/source" ] && \. /usr/local/lib/zmicro/plugins/nvm/source

  if [ "$(os::is_nodejs_installed)" = "false" ]; then
    zpackage install nodejs
  fi

  # @TODO
  if [ "$(net::is_google_visitable)" = "false" ]; then
    export NPM_CONFIG_REGISTRY=https://registry.npmmirror.com
  fi

  if [ "$(os::has_command cnpm)" != "true" ]; then
    npm install -g cnpm --registry=https://registry.npmmirror.com
  fi

  cnpm $@
}

# node yarn
pm::yarn() {
  # ZMICRO_NVM
  [ -s "/usr/local/lib/zmicro/plugins/nvm/source" ] && \. /usr/local/lib/zmicro/plugins/nvm/source

  if [ "$(os::is_nodejs_installed)" = "false" ]; then
    zpackage install nodejs
  fi

  # @TODO
  if [ "$(net::is_google_visitable)" = "false" ]; then
    export NPM_CONFIG_REGISTRY=https://registry.npmmirror.com
  fi

  if [ "$(os::has_command yarn)" != "true" ]; then
    npm install -g yarn --registry=https://registry.npmmirror.com
  fi

  yarn $@
}

# node pnpm
pm::pnpm() {
  # ZMICRO_NVM
  [ -s "/usr/local/lib/zmicro/plugins/nvm/source" ] && \. /usr/local/lib/zmicro/plugins/nvm/source

  if [ "$(os::is_nodejs_installed)" = "false" ]; then
    zpackage install nodejs
  fi

  # @TODO
  if [ "$(net::is_google_visitable)" = "false" ]; then
    export NPM_CONFIG_REGISTRY=https://registry.npmmirror.com
  fi

  if [ "$(os::has_command pnpm)" != "true" ]; then
    npm install -g pnpm --registry=https://registry.npmmirror.com
  fi

  pnpm $@
}

export -f pm

export -f pm::brew

export -f pm::apt
export -f pm::yum
export -f pm::apk
export -f pm::pacman
export -f pm::dnf

export -f pm::npm
export -f pm::cnpm
export -f pm::yarn
export -f pm::pnpm
