#!/bin/bash

testing::expect() {
  local test_name=$1
  local test_func=$2
  local test_args="${@:3}"

  log::info "  Case: $test_name"
  # log::info "  $test_func $test_args"
  
  # eval "testing::expect::$test_func $test_args"
  local fn_name="testing::expect::$test_func"
  $fn_name $test_args
  # $fn_name "$@"

  # log::info "  $test_func $test_args"
}

testing::expect::to_equal() {
  local expected=$1
  local received=$2
  # local expected=$3
  # local received=$4
  if [ "$received" != "$expected" ]; then
    log::error "    [$(timestamp)][expect_to_equal] expect($expected) but receive($received)"
    exit 1
  else
    log::success "    [$(timestamp)][expect_to_equal] ok (value: $expected)"
  fi
}

testing::jest() {
  local runtime_dir=$PWD
  export ZMICRO_JEST_RUNTIME_DIR=$runtime_dir
  local jest_config=$ZMICRO_PLUGINS_PATH/core-utils/config/others/jest.config.mjs

  #   local tmp_dir=$(os::tmp_dir)
  #   local jest_config=$tmp_dir/jest.config.mjs

  #   mkdir -p $tmp_dir
  #   # cd $tmp_dir
  #   local text=$(
  #     cat <<-END
  # export default {
  #   rootDir: '$runtime_dir',
  #   testMatch: ['<rootDir>/core/**/*_test.(js|mjs)'],
  # }
  # END
  #   )

  #   echo "$text" | fs::write $jest_config

  NODE_OPTIONS=--experimental-vm-modules npx jest -c $jest_config $runtime_dir
}

export -f testing::expect
export -f testing::expect::to_equal

export -f testing::jest
